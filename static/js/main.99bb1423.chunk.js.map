{"version":3,"sources":["components/EditableDiv/index.js","components/SceneHeading/index.js","components/Action/index.js","components/Charector/index.js","constants.js","components/Paranthetical/index.js","components/Dialogue/index.js","components/Transition/index.js","components/ElementOptions/index.js","containers/Elements/index.js","containers/Board/index.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["EditableDiv","props","contentEditable","SceneHeading","onKeyPress","className","placeholder","Action","Charector","Paranthetical","Dialogue","Transition","Select","id","MenuItem","value","ElementOptions","show","handleClose","addSceneHeading","addAction","insChar","addDialogue","addParanthetical","addTransition","onSelect","selectedCallBack","Menu","open","onClose","onClick","Elements","type","useState","setShow","element","e","key","shiftKey","prevState","preventDefault","constants","Board","elements","setElemetsListToState","newEle","setElemetsList","prevElList","commonProps","elementsList","map","el","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+eAKeA,MAHf,SAAqBC,GACrB,OAAO,uCAAKC,iBAAe,GAAKD,K,MCWjBE,MAXf,SAAsBF,GAAQ,IAClBG,EAAcH,EAAdG,WACR,OAAO,yBAAKC,UAAU,iBAElB,kBAAC,EAAD,CAAaA,UAAU,UAAUC,YAAY,YAC7C,kBAAC,EAAD,CAAaD,UAAU,WAAWC,YAAY,aAC9C,kBAAC,EAAD,CAAaD,UAAU,OAAOH,iBAAiB,EAAME,WAAYA,EAAYE,YAAY,8B,MCAlFC,MANf,YAA+B,IAAdH,EAAa,EAAbA,WACb,OAAQ,yBAAKC,UAAU,UACnB,kBAAC,EAAD,CAAaC,YAAY,SAASF,WAAYA,M,MCMvCI,MARf,YAAkC,IAAdJ,EAAa,EAAbA,WAEhB,OAAO,yBAAKC,UAAU,aAClB,kBAAC,EAAD,CAAaC,YAAY,iBAAiBF,WAAYA,MCA9C,EANG,YAMH,EALA,SAKA,EAJO,gBAIP,EAHE,WAGF,EAFO,gBAEP,EADI,a,MCILK,MANf,YAAsC,IAAdL,EAAa,EAAbA,WAEpB,OAAQ,yBAAKC,UAAU,iBACnB,kBAAC,EAAD,CAAaC,YAAY,8BAA8BF,WAAYA,M,MCG5DM,MANf,YAAiC,IAAdN,EAAa,EAAbA,WAEf,OAAQ,yBAAKC,UAAU,YACnB,kBAAC,EAAD,CAAaC,YAAY,WAAWF,WAAYA,M,sBCSzCO,MAXf,SAAoBV,GAChB,OAAO,yBAAKI,UAAU,cAClB,kBAACO,EAAA,EAAD,CACEC,GAAG,qBAEH,kBAACC,EAAA,EAAD,CAAUC,MAAO,UAAjB,WACA,kBAACD,EAAA,EAAD,CAAUC,MAAO,WAAjB,YACA,kBAACD,EAAA,EAAD,CAAUC,MAAO,SAAjB,a,QCWKC,MAnBf,SAAwBf,GAAO,IACpBgB,EAAwGhB,EAAxGgB,KAAMC,EAAkGjB,EAAlGiB,YAAaC,EAAqFlB,EAArFkB,gBAAiBC,EAAoEnB,EAApEmB,UAAWC,EAAyDpB,EAAzDoB,QAASC,EAAgDrB,EAAhDqB,YAAaC,EAAmCtB,EAAnCsB,iBAAkBC,EAAiBvB,EAAjBuB,cACxFC,EAAW,SAACC,GAChBA,IACAR,KAEF,OAAO,kBAACS,EAAA,EAAD,CACPd,GAAG,gBACHe,KAAMX,EACNY,QAASX,GAET,kBAACJ,EAAA,EAAD,CAAUgB,QAAS,kBAAML,EAASN,KAAlC,iBACA,kBAACL,EAAA,EAAD,CAAUgB,QAAS,kBAAML,EAASL,KAAlC,UACA,kBAACN,EAAA,EAAD,CAAUgB,QAAS,kBAAML,EAASJ,KAAlC,aACA,kBAACP,EAAA,EAAD,CAAUgB,QAAS,kBAAML,EAASH,KAAlC,YACA,kBAACR,EAAA,EAAD,CAAUgB,QAAS,kBAAML,EAASF,KAAlC,iBACA,kBAACT,EAAA,EAAD,CAAUgB,QAAS,kBAAML,EAASD,KAAlC,gBCgCWO,MAxCf,SAAkB9B,GAAQ,IACf+B,EAAQ/B,EAAR+B,KADc,EAEGC,oBAAS,GAFZ,mBAEdhB,EAFc,KAERiB,EAFQ,KAGjBC,EAAU,KACR/B,EAAa,SAACgC,GACH,UAAVA,EAAEC,KAAmBD,EAAEE,WACtBJ,GAAQ,SAACK,GAAD,OAAgBA,KACxBH,EAAEI,mBAGV,OAAOR,GACH,KAAKS,EACDN,EAAW,kBAAC,EAAD,CAAc/B,WAAYA,IACrC,MACJ,KAAKqC,EACDN,EAAW,kBAAC,EAAD,CAAQ/B,WAAYA,IAC/B,MACJ,KAAKqC,EACDN,EAAW,kBAAC,EAAD,CAAW/B,WAAYA,IAClC,MACJ,KAAKqC,EACDN,EAAW,kBAAC,EAAD,CAAe/B,WAAYA,IACtC,MACJ,KAAKqC,EACDN,EAAW,kBAAC,EAAD,CAAU/B,WAAYA,IACjC,MACJ,KAAKqC,EACDN,EAAW,kBAAC,EAAD,CAAY/B,WAAYA,IAI3C,OAAO,yBAAKC,UAAU,WACjB8B,EACD,kBAAC,EAAD,eAAgBlB,KAAMA,GAAUhB,EAAhC,CAAuCiB,YAAa,WAAQgB,GAAQ,S,MCR7DQ,MAhCf,SAAezC,GAAQ,IACZ0C,EAAY1C,EAAZ0C,SACDC,EAAwB,SAACC,GAC3BC,GAAe,SAAAC,GAAU,4BAAQA,GAAR,CAAoBF,QAoB3CG,EAAc,CAAC5B,UANH,WACdwB,EAAsB,CAACZ,KAAMS,KAKDjB,cAfV,WAClBoB,EAAsB,CAACZ,KAAMS,KAcanB,YAZ1B,WAChBsB,EAAsB,CAACZ,KAAMS,KAW0BlB,iBAlBlC,WACrBqB,EAAsB,CAACZ,KAAMS,KAiB4CpB,QAT1D,WACfuB,EAAsB,CAACZ,KAAMS,KAQiEtB,gBAH1E,WACpByB,EAAsB,CAACZ,KAAMS,MArBf,EAyBqBR,mBAASU,GAAY,CAAC,CAACX,KAAMS,KAzBlD,mBAyBXQ,EAzBW,KAyBGH,EAzBH,KA2BlB,OAAO,yBAAKzC,UAAU,SACjB4C,EAAaC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,iBAAaA,EAAQH,SCPtCI,G,6KAhBX,OACE,yBAAK/C,UAAU,OACb,4BAAQA,UAAU,qBAAlB,iBAGA,yBAAKA,UAAU,iBAGb,kBAAC,EAAD,Y,GAVQgD,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99bb1423.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss'\nfunction EditableDiv(props) {\nreturn <div contentEditable {...props}></div>\n}\nexport default EditableDiv;","import React from 'react';\nimport EditableDiv from '../EditableDiv'\nimport './style.scss';\nfunction SceneHeading(props) {\n    const { onKeyPress} = props;\n    return <div className=\"scene-heading\">\n                \n        <EditableDiv className=\"int-ext\" placeholder=\"INT/EXT\" />\n        <EditableDiv className=\"location\" placeholder=\"LOCATION\"/>\n        <EditableDiv className=\"time\" contentEditable={true} onKeyPress={onKeyPress} placeholder=\"TIME ex: MORNING, NIGHT\"></EditableDiv>\n        \n    </div>;\n}\n\nexport default SceneHeading;","import React from 'react';\nimport EditableDiv from '../EditableDiv';\nimport './style.scss';\nfunction Action({onKeyPress}) {\n    return (<div className=\"action\">\n        <EditableDiv placeholder=\"Action\" onKeyPress={onKeyPress}/>\n    </div>)\n}\n\nexport default Action;","import React from 'react';\nimport EditableDiv from '../EditableDiv'\nimport './style.scss';\nfunction Charector({onKeyPress}) {\n\n    return <div className=\"charector\">\n        <EditableDiv placeholder=\"Charector name\" onKeyPress={onKeyPress}/>\n\n        </div>\n}\n\nexport default Charector;"," const CHARECTOR = \"CHARECTOR\";\n const ACTION = \"ACTION\";\n const PARANTHETICAL = \"PARANTHETICAL\";\n const DIALOGUE = \"DIALOGUE\";\n const SCENE_HEADING = \"SCENE_HEADING\"\n const TRANSITION = \"TRANSITION\"\n export default {\n    CHARECTOR,\n    ACTION,\n    PARANTHETICAL,\n    DIALOGUE,\n    SCENE_HEADING,\n    TRANSITION\n }","import React from 'react';\nimport EditableDiv from '../EditableDiv';\nimport './style.scss';\nfunction Paranthetical({onKeyPress}) {\n\n    return (<div className=\"paranthetical\">\n        <EditableDiv placeholder=\"describe state of charector\" onKeyPress={onKeyPress}/>\n    </div>)\n}\nexport default Paranthetical;","import React from 'react';\nimport EditableDiv from '../EditableDiv';\nimport './style.scss';\nfunction Dialogue({onKeyPress}) {\n\n    return (<div className=\"dialogue\">\n        <EditableDiv placeholder=\"Dialogue\" onKeyPress={onKeyPress}/>\n    </div>)\n}\nexport default Dialogue;","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport './style.scss';\nfunction Transition(props) {\n    return <div className=\"transition\">\n        <Select\n          id=\"transition-select\"\n        >\n          <MenuItem value={'FADEIN'}>FADE IN</MenuItem>\n          <MenuItem value={'FADEOUT'}>FADE OUT</MenuItem>\n          <MenuItem value={\"CUTTO\"}>CUT TO</MenuItem>\n        </Select>\n    </div>\n}\nexport default Transition","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nfunction ElementOptions(props){\n    const {show, handleClose, addSceneHeading, addAction, insChar, addDialogue, addParanthetical, addTransition} = props;\n    const onSelect = (selectedCallBack) => {\n      selectedCallBack();\n      handleClose();\n    }\n    return <Menu\n    id=\"elements-menu\"\n    open={show}\n    onClose={handleClose}\n  >\n    <MenuItem onClick={() => onSelect(addSceneHeading)} >Scene heading</MenuItem>\n    <MenuItem onClick={() => onSelect(addAction)}>Action</MenuItem>\n    <MenuItem onClick={() => onSelect(insChar)} >Charector</MenuItem>\n    <MenuItem onClick={() => onSelect(addDialogue)} >Dialogue</MenuItem>\n    <MenuItem onClick={() => onSelect(addParanthetical)} >Paranthetical</MenuItem>\n    <MenuItem onClick={() => onSelect(addTransition)} >Transition</MenuItem>\n  </Menu>\n}\nexport default ElementOptions;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types'\nimport './style.scss';\nimport SceneHeading from '../../components/SceneHeading';\nimport Action from '../../components/Action';\nimport Charector from '../../components/Charector';\nimport constants from '../../constants';\nimport Paranthetical from '../../components/Paranthetical';\nimport Dialogue from '../../components/Dialogue';\nimport Transition from '../../components/Transition';\nimport ElementOptions from '../../components/ElementOptions';\nfunction Elements(props) {\n    const {type} = props;\n    const [show, setShow] = useState(false);\n    let element = null; \n    const onKeyPress = (e) => {\n        if(e.key === 'Enter' && e.shiftKey) {\n            setShow((prevState) => !prevState)\n            e.preventDefault();\n        }\n    }   \n    switch(type) {\n        case constants.SCENE_HEADING:\n            element = (<SceneHeading onKeyPress={onKeyPress}/>);\n            break;\n        case constants.ACTION: \n            element = (<Action onKeyPress={onKeyPress}/>);\n            break;\n        case constants.CHARECTOR:\n            element = (<Charector onKeyPress={onKeyPress}/>);\n            break;\n        case constants.PARANTHETICAL:\n            element = (<Paranthetical onKeyPress={onKeyPress}/>);\n            break;\n        case constants.DIALOGUE:\n            element = (<Dialogue onKeyPress={onKeyPress}/>);\n            break;\n        case constants.TRANSITION:\n            element = (<Transition onKeyPress={onKeyPress}/>)\n        default: \n\n    }\n    return <div className=\"element\">\n        {element}\n        <ElementOptions show={show} {...props} handleClose={() => { setShow(false)}}/>\n    </div>\n    \n}\nElements.propTypes = {\n    onAddElement: PropTypes.func.isRequired,\n}\nexport default Elements;","import React, {useState} from 'react';\nimport Element from '../Elements'\nimport './style.scss';\nimport constants from '../../constants';\nfunction Board(props) {\n    const {elements} = props;\n    const setElemetsListToState = (newEle) => {\n        setElemetsList(prevElList => [...prevElList, newEle] )\n    }\n    const addParanthetical = function () {\n        setElemetsListToState({type: constants.PARANTHETICAL})\n    }\n    const addTransition = () => {\n        setElemetsListToState({type: constants.TRANSITION})\n    }\n    const addDialogue = () => {\n        setElemetsListToState({type: constants.DIALOGUE, })\n    }\n    const insertChar = function() {\n        setElemetsListToState({type: constants.CHARECTOR, })\n    }\n    const addAction = function() {\n        setElemetsListToState({type: constants.ACTION, })\n    }\n    const addSceneHeading = () => {\n        setElemetsListToState({type: constants.SCENE_HEADING, })\n    }\n    const commonProps = {addAction, addTransition,addDialogue, addParanthetical, insChar: insertChar, addSceneHeading}\n    \n    const [elementsList, setElemetsList] = useState(elements || [{type: constants.SCENE_HEADING}]);\n\n    return <div className=\"board\">\n        {elementsList.map(el => <Element {...el} {...commonProps}/>)}\n    </div>\n}\n\nexport default Board;","import React from 'react';\n// import Editor from '../Editor';\n// import Elements from '../Elements';\nimport Board from '../Board'\n// import Charector from '../../components/Charector';\n// import {CHAR} from '../../constants'\nimport './App.css';\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header center\">\n         Script assist\n        </header>\n        <div className=\"App-container\">\n          {/* <Elements onAddElement={this.onAddElement}/> */}\n          {/* <Editor onChange={this.onContentChange} editorRef={this.editor} /> */}\n          <Board/>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}