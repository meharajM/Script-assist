{"version":3,"sources":["components/EditableDiv/index.js","components/SceneHeading/index.js","components/Action/index.js","components/Charector/index.js","constants.js","components/Paranthetical/index.js","components/Dialogue/index.js","components/Transition/index.js","containers/Elements/index.js","containers/Board/index.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["EditableDiv","props","contentEditable","SceneHeading","addAction","className","placeholder","onKeyPress","ev","which","Button","variant","onClick","Action","insChar","Charector","addParanthetical","addDialogue","Paranthetical","Dialogue","addTransition","Transition","Select","id","MenuItem","value","Elements","type","element","constants","Board","elements","setElemetsListToState","newEle","setElemetsList","prevElList","insertChar","useState","elementsList","map","el","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2055586.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss'\nfunction EditableDiv(props) {\nreturn <div contentEditable {...props}></div>\n}\nexport default EditableDiv;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport EditableDiv from '../EditableDiv'\nimport './style.scss';\nfunction SceneHeading(props) {\n    const {addAction} = props;\n    return <div className=\"scene-heading\">\n                \n        <EditableDiv className=\"int-ext\" placeholder=\"INT/EXT\"/>\n        <EditableDiv className=\"location\" placeholder=\"LOCATION\"/>\n        <EditableDiv className=\"time\" contentEditable={true} onKeyPress={(ev) => {\n            if(ev.which === 13) {\n                addAction();\n            }\n        }} placeholder=\"TIME ex: MORNING, NIGHT\"></EditableDiv>\n        \n        <div><Button variant=\"outlined\" onClick={addAction}>Add Action</Button></div>\n    </div>;\n}\n\nexport default SceneHeading;","import React from 'react';\nimport EditableDiv from '../EditableDiv';\nimport { Button } from '@material-ui/core';\nimport './style.scss';\nfunction Action(props) {\n    const {insChar} = props;\n    return (<div className=\"action\">\n        <EditableDiv placeholder=\"Action\"/>\n        <Button variant=\"outlined\" onClick={insChar}>Insert Charector</Button>\n    </div>)\n}\n\nexport default Action;","import React from 'react';\nimport EditableDiv from '../EditableDiv'\nimport './style.scss';\nimport { Button } from '@material-ui/core';\nfunction Charector(props) {\n    const {addParanthetical, addDialogue} = props;\n    return <div className=\"charector\">\n        <EditableDiv placeholder=\"Charector name\"/>\n        <Button variant=\"outlined\" onClick={addParanthetical}>Paranthetical</Button>\n        <Button variant=\"outlined\" onClick={addDialogue}>Dialog</Button>\n        </div>\n}\n\nexport default Charector;"," const CHARECTOR = \"CHARECTOR\";\n const ACTION = \"ACTION\";\n const PARANTHETICAL = \"PARANTHETICAL\";\n const DIALOGUE = \"DIALOGUE\";\n const SCENE_HEADING = \"SCENE_HEADING\"\n const TRANSITION = \"TRANSITION\"\n export default {\n    CHARECTOR,\n    ACTION,\n    PARANTHETICAL,\n    DIALOGUE,\n    SCENE_HEADING,\n    TRANSITION\n }","import React from 'react';\nimport EditableDiv from '../EditableDiv';\nimport './style.scss';\nfunction Paranthetical(props) {\n    return (<div className=\"paranthetical\">\n        <EditableDiv placeholder=\"describe state of charector\"/>\n    </div>)\n}\nexport default Paranthetical;","import React from 'react';\nimport EditableDiv from '../EditableDiv';\nimport './style.scss';\nimport { Button } from '@material-ui/core';\nfunction Dialogue(props) {\n    const {addTransition} = props;\n    return (<div className=\"dialogue\">\n        <EditableDiv placeholder=\"Dialogue\"/>\n        <Button variant='outlined' onClick={addTransition}>Add transition</Button>\n    </div>)\n}\nexport default Dialogue;","import React from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport './style.scss';\nfunction Transition(props) {\n    return <div className=\"transition\">\n        <Select\n          id=\"transition-select\"\n        >\n          <MenuItem value={'FADEIN'}>FADE IN</MenuItem>\n          <MenuItem value={'FADEOUT'}>FADE OUT</MenuItem>\n          <MenuItem value={\"CUTTO\"}>CUT TO</MenuItem>\n        </Select>\n    </div>\n}\nexport default Transition","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './style.scss';\nimport SceneHeading from '../../components/SceneHeading';\nimport Action from '../../components/Action';\nimport Charector from '../../components/Charector';\nimport constants from '../../constants';\nimport Paranthetical from '../../components/Paranthetical';\nimport Dialogue from '../../components/Dialogue';\nimport Transition from '../../components/Transition';\nfunction Elements(props) {\n    const {type, addAction, insChar, addParanthetical, addDialogue, addTransition} = props;\n    let element = null; \n    switch(type) {\n        case constants.SCENE_HEADING:\n            element = (<SceneHeading addAction={addAction}/>);\n            break;\n        case constants.ACTION: \n            element = (<Action insChar={insChar}/>);\n            break;\n        case constants.CHARECTOR:\n            element = (<Charector addParanthetical={addParanthetical} addDialogue={addDialogue} />);\n            break;\n        case constants.PARANTHETICAL:\n            element = (<Paranthetical/>);\n            break;\n        case constants.DIALOGUE:\n            element = (<Dialogue addTransition={addTransition}/>);\n            break;\n        case constants.TRANSITION:\n            element = (<Transition />)\n        default: \n\n    }\n    return <div className=\"element\">\n        {element}\n    </div>\n    \n}\nElements.propTypes = {\n    onAddElement: PropTypes.func.isRequired,\n}\nexport default Elements;","import React, {useState} from 'react';\nimport Element from '../Elements'\nimport './style.scss';\nimport constants from '../../constants';\nfunction Board(props) {\n    const {elements} = props\n    const setElemetsListToState = (newEle) => {\n        setElemetsList(prevElList => [...prevElList, newEle] )\n    }\n    const addParanthetical = function () {\n        setElemetsListToState({type: constants.PARANTHETICAL})\n    }\n    const addTransition = () => {\n        setElemetsListToState({type: constants.TRANSITION})\n    }\n    const addDialogue = () => {\n        setElemetsListToState({type: constants.DIALOGUE, addTransition})\n    }\n    const insertChar = function() {\n        setElemetsListToState({type: constants.CHARECTOR, addDialogue, addParanthetical})\n    }\n    const addAction = function() {\n        setElemetsListToState({type: constants.ACTION, insChar: insertChar})\n    }\n   \n    const [elementsList, setElemetsList] = useState(elements || [{type: constants.SCENE_HEADING, addAction: addAction}]);\n\n    return <div className=\"board\">\n        {elementsList.map(el => <Element {...el}/>)}\n    </div>\n}\n\nexport default Board;","import React from 'react';\n// import Editor from '../Editor';\n// import Elements from '../Elements';\nimport Board from '../Board'\n// import Charector from '../../components/Charector';\n// import {CHAR} from '../../constants'\nimport './App.css';\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header center\">\n         Script assist\n        </header>\n        <div className=\"App-container\">\n          {/* <Elements onAddElement={this.onAddElement}/> */}\n          {/* <Editor onChange={this.onContentChange} editorRef={this.editor} /> */}\n          <Board/>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}